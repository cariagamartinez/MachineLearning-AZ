setwd("~/Documents/BIG DATA/@Repositorios/machinelearning-az/datasets/Part 3 - Classification/Section 17 - Kernel SVM")
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, c("Gender", "Age", "Purchased")] #Aquí me quedo con las variables que me intersan
#por nombre de columna
# Codificar las variables categóricas
dataset$Gender = factor(dataset$Gender,
levels = c("Male", "Female"),
labels = c(10, 25,))
dataset$Gender <- as.numeric(as.character(dataset$Gender))
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, c("Gender", "Age", "Purchased")] #Aquí me quedo con las variables que me intersan
#por nombre de columna
# Codificar las variables categóricas
dataset$Gender = factor(dataset$Gender,
levels = c("Male", "Female"),
labels = c(10, 25,))
dataset$Gender <- as.numeric(as.character(dataset$Gender))
View(dataset)
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, c("Gender", "Age", "Purchased")] #Aquí me quedo con las variables que me intersan
#por nombre de columna
# Codificar las variables categóricas
dataset$Gender = factor(dataset$Gender,
levels = c("Male", "Female"),
labels = c(10, 25,))
View(dataset)
dataset$Gender <- as.numeric(as.character(dataset$Gender))
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, c("Gender", "Age", "Purchased")] #Aquí me quedo con las variables que me intersan
#por nombre de columna
# Codificar las variables categóricas
dataset$Gender = factor(dataset$Gender,
levels = c("Male", "Female"),
labels = c(10, 25))
View(dataset)
dataset$Gender <- as.numeric(as.character(dataset$Gender))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(e1071)
classifier = svm(formula = Purchased ~.,
data = training_set,
type = "C-classification",
kernel = "radial")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set)
cm = table(testing_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Gender', 'Age')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
View(training_set)
training_set * attr(training_set, 'scaled:scale') + attr(training_set, 'scaled:center')
training_set + attr(training_set, 'scaled:scale') + attr(training_set, 'scaled:center')
View(training_set)
training_set * attr(training_set, 'scaled:scale') + attr(training_set, 'scaled:center')
d$training_set * attr(d$training_set, 'scaled:scale') + attr(d$training_set, 'scaled:center')
$training_set * attr(d$training_set, 'scaled:scale') + attr($training_set, 'scaled:center')
training<-training_set * attr(d$training_set, 'scaled:scale') + attr($training_set, 'scaled:center')
training<-training_set * attr(training_set, 'scaled:scale') + attr(training_set, 'scaled:center')
unscale (training_set) -> df
training_set * attr(training_set, 'scaled:scale') + attr(training_set, 'scaled:center')
