install.packages("tidyverse")
library(tidyverse)
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "rpart", "spatial"))
library(tidyverse)
install.packages(c("gapminder", "nycflights13", "Lahman"))
install.packages(c("cluster", "KernSmooth", "Matrix", "mgcv"))
1+2
6*5
sqrt(25)
2^4
sin(pi)
cos(pi)
sum(c(1,2,3,4,5))
mean(c(1,2,3,4,5))
x = c(1,2,3,4,5)
library(nycflights13)
nycflights13::flights
mtcars
dput(mtcars)
library("tidyverse")
help(lm)
demo()
## Annette Dobson (1990) "An Introduction to Generalized Linear Models".
## Page 9: Plant Weight Data.
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
par(opar)
View(lm.D90)
View(lm.D9)
View(opar)
install.packages(c("cluster", "KernSmooth", "Matrix", "mgcv"))
install.packages(c("cluster", "KernSmooth", "Matrix", "mgcv", "pkgbuild", "tidyr"))
install.packages(c("cluster", "KernSmooth", "Matrix", "mgcv", "ps"))
install.packages(c("boot", "class", "foreign", "KernSmooth", "MASS", "nnet", "spatial"))
library("tidyvers")
library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
# Visualización de datos.
# Vamos a cargar la librería a utilizar, en este caso, tidyverse
library(tidyverse)
ggplot2::mpg
# Vamos a ejecutar la función View para ver el dataframe como si fuera un excel
View(mpg)
help(mpg)
?(mpg) # = help(mpg)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y=hwy))
Proyectos_covid <- ("../../../../../../Desktop/Proyectos de investigación financiados COVID-19.html", header = FALSE)
datos = readHTMLTable(Proyectos_covid)
covid_tablita <- datos[[1]]
library(XML)
Proyectos_covid <- ("../../../../../../Desktop/Proyectos de investigación financiados COVID-19.html", header = FALSE)
datos = readHTMLTable(Proyectos_covid)
covid_tablita <- datos[[1]]
library(XML)
Proyectos_covid <- ("../../../../../../Desktop/Proyectos de investigación financiados COVID-19.html", header=T)
Proyectos_covid <- "../../../../../../Desktop/Proyectos de investigación financiados COVID-19.html"
datos = readHTMLTable(Proyectos_covid)
View(datos)
datos = readHTMLTable(Proyectos_covid)
Proyectos_covid <- "../../../../../../Desktop/Proyectos de investigación financiados COVID-19.html"
datos = readHTMLTable(Proyectos_covid)
covid_tabla <- datos[[1]]
View(datos)
setwd("~/Documents/BIG DATA/MachineLearning_Training/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression")
setwd("~/Documents/BIG DATA/MachineLearning_Training/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
View(dataset)
dataset$State = factor(dataset$State,
levels = c("California", "Florida", "New York"),
labels = c(1, 2, 3))
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
regression = lm(formula = Profit ~ .
data = training_set)
regression = lm(formula = Profit ~ .,
data = training_set)
View(regression)
summary(regression)
y_pred = predict(regression, newdata = testing_set)
y_pred
View(testing_set)
library(tidyverse)
SL = 0.05
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regression)
SL = 0.05
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regression)
View(regression)
View(regression)
